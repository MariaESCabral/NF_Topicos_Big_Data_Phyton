# -*- coding: utf-8 -*-
"""PRIMEIRA_ETAPA_NF_ARA0168

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HyXAwkHljeSyK3JIR7E0Z8be-rpvFQOl
"""

# Primeira etapa do trabalho de conclusão de disciplina apresentado na disciplina de Tópicos de Big Data em Python.
# Tema: Análise da relação entre o consumo de tabaco e a taxa de mortalidade na população brasileira - Utilização de regressão linear e análise descritiva
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression

# Importando os Dados
tb_taxamorte = pd.read_csv('https://raw.githubusercontent.com/MariaESCabral/NF_Topicos_Big_Data_Python/main/death-rate-smoking%20(1).csv', sep=';')
tb_cigarroporpessoa = pd.read_csv('https://raw.githubusercontent.com/MariaESCabral/NF_Topicos_Big_Data_Python/main/consumption-per-smoker-per-day-bounds-brasil.csv', sep=';')

# Remove as duas primeiras colunas que são inuteis.
tb_taxamorte = tb_taxamorte.iloc[:, 2:]
tb_cigarroporpessoa = tb_cigarroporpessoa.iloc[:, 2:]

# Renomeando colunas
tb_taxamorte.columns = ['ANO', 'TAXA DE MORTE']
tb_cigarroporpessoa.columns = ['ANO', 'CIGARROS POR DIA']

# Junta as duas tabelas
df = tb_cigarroporpessoa.merge(tb_taxamorte, on='ANO', how='inner') # com o inner os anos que dão NaN já são descartados

df = df.drop(columns=['ANO']) # Deleta coluna ANO que não é mais necessaria pro inner

# Removendo as virgulas da tabela e convertendo
df['CIGARROS POR DIA'] = df['CIGARROS POR DIA'].str.replace(',', '.').astype(float) # valor por n 100 mil habitates
df['TAXA DE MORTE'] = df['TAXA DE MORTE'].str.replace(',', '.').astype(float) # valor por n 100 mil habitates

# Atribuindo oq irei ultilizar de X(variável independente) e Y (variável dependente)
x = df[['CIGARROS POR DIA']]  # Variável independente (X): Consumo de tabaco per capita (por exemplo, número médio de cigarros fumados por pessoa por ano).
y = df['TAXA DE MORTE']     # Variável dependente (Y): Taxa de mortalidade por doenças cardiovasculares (por exemplo, número de mortes por 100.000 habitantes devido a doenças cardiovasculares).

x = x.apply(lambda x: x * 365) # Multiplicando os valores de x por 365 para saber a media anual

model = LinearRegression() # Criando o modelo de regressão linear
model.fit(x, y) # Treinando o modelo com os dados

coeficiente_angular = model.coef_[0] # Obtendo os coeficientes da regressão
intercepto = model.intercept_

previsoes = model.predict(x) # Fazendo previsões

# Visualizando os dados e a linha de regressão
plt.scatter(x, y, color='blue')
plt.plot(x, previsoes, color='red')
plt.xlabel('Número médio de cigarros fumados por pessoa por ano')
plt.ylabel('Taxa de Mortalidade (por 100.000 habitantes)')
plt.title('Regressão Linear')
# inverte eixos
plt.gca().invert_xaxis()
plt.gca().invert_yaxis()
plt.show()

print(f"Coeficiente Angular (inclinação): {coeficiente_angular}")
print(f"Intercepto (coeficiente linear): {intercepto}")

# Análise descritiva (média, moda, mediana e desvio padrão)

media_cigarros = df['CIGARROS POR DIA'].mean() #media
media_taxa_morte = df['TAXA DE MORTE'].mean()

moda_cigarros = df['CIGARROS POR DIA'].mode()[0] #moda
moda_taxa_morte = df['TAXA DE MORTE'].mode()[0]

mediana_cigarros = df['CIGARROS POR DIA'].median() #mediana
mediana_taxa_morte = df['TAXA DE MORTE'].median()

desvio_padrao_cigarros = df['CIGARROS POR DIA'].std() #desvio
desvio_padrao_taxa_morte = df['TAXA DE MORTE'].std()


contagem_cigarros = df['CIGARROS POR DIA'].value_counts() # Etapas de agrupamento e contagem
contagem_taxa_morte = df['TAXA DE MORTE'].value_counts()


print(f"Média de cigarros por dia: {media_cigarros}")  #media
print(f"Média da taxa de mortalidade: {media_taxa_morte}")

print(f"Moda de cigarros por dia: {moda_cigarros}") #moda
print(f"Moda da taxa de mortalidade: {moda_taxa_morte}")

print(f"Mediana de cigarros por dia: {mediana_cigarros}") #mediana
print(f"Mediana da taxa de mortalidade: {mediana_taxa_morte}")

print(f"Desvio padrão de cigarros por dia: {desvio_padrao_cigarros}") #desvio
print(f"Desvio padrão da taxa de mortalidade: {desvio_padrao_taxa_morte}")

print("Contagem de elementos para cigarros por dia:")
print(contagem_cigarros)

print("Contagem de elementos para a taxa de mortalidade:")
print(contagem_taxa_morte)
